-- Model
MODULE main
	VAR
		loc : {init_pv, end, loop_start, prepare_BoC, l_main_call, prepare_EoC, verificationLoop_VerificationLoop_l5};
		instance_Value1 : signed word[16]; -- frozen
		instance_Value2 : signed word[16]; -- frozen
		instance_MaxValue : signed word[16]; -- frozen
		EoC : boolean; -- frozen
		BoC : boolean; -- frozen
		-- Random vars for nondeterministic INTs
		__random_instance_Value1 : signed word[16];
		__random_instance_Value2 : signed word[16];
	
	ASSIGN
		-- CFA structure (loc)
		init(loc) := init_pv;
		next(loc) := case
			loc = init_pv & (TRUE) : loop_start;
			loc = loop_start & (TRUE) : prepare_BoC;
			loc = prepare_BoC & (TRUE) : l_main_call;
			loc = verificationLoop_VerificationLoop_l5 & (TRUE) : prepare_EoC;
			loc = prepare_EoC & (TRUE) : loop_start;
			loc = l_main_call & ((instance_Value1) > (instance_Value2)) : verificationLoop_VerificationLoop_l5;
			loc = l_main_call & (!((instance_Value1) > (instance_Value2))) : verificationLoop_VerificationLoop_l5;
			TRUE: loc;
		esac;
		
		init(instance_Value1) := 0sd16_0;
		next(instance_Value1) := case
			loc = loop_start & (TRUE) : __random_instance_Value1; -- Nondeterministic
			TRUE  : instance_Value1;
		esac;
		init(instance_Value2) := 0sd16_0;
		next(instance_Value2) := case
			loc = loop_start & (TRUE) : __random_instance_Value2; -- Nondeterministic
			TRUE  : instance_Value2;
		esac;
		init(instance_MaxValue) := 0sd16_0;
		next(instance_MaxValue) := case
			loc = l_main_call & ((instance_Value1) > (instance_Value2)) : instance_Value1;
			loc = l_main_call & (!((instance_Value1) > (instance_Value2))) : instance_Value2;
			TRUE  : instance_MaxValue;
		esac;
		init(EoC) := FALSE;
		next(EoC) := case
			loc = verificationLoop_VerificationLoop_l5 & (TRUE) : TRUE;
			loc = prepare_EoC & (TRUE) : FALSE;
			TRUE  : EoC;
		esac;
		init(BoC) := FALSE;
		next(BoC) := case
			loc = loop_start & (TRUE) : TRUE;
			loc = prepare_BoC & (TRUE) : FALSE;
			TRUE  : BoC;
		esac;

-- Requirement
CTLSPEC AG((EoC) -> (((instance_MaxValue) >= (instance_Value1)) & ((instance_MaxValue) >= (instance_Value2))));
