-- Model
MODULE main
	VAR
		loc : {init_pv, end, loop_start, prepare_BoC, l_main_call, prepare_EoC, verificationLoop_VerificationLoop_l1, verificationLoop_VerificationLoop_l8, verificationLoop_VerificationLoop_l9, verificationLoop_VerificationLoop_l12, verificationLoop_VerificationLoop_l15};
		instance_N : signed word[16];
		instance_O : signed word[16]; -- frozen
		instance_F1 : signed word[16]; -- frozen
		instance_F2 : signed word[16]; -- frozen
		instance_F_next : signed word[16];
		instance_i : signed word[16];
		EoC : boolean; -- frozen
		BoC : boolean; -- frozen
		-- Random vars for nondeterministic INTs
		__random_instance_N : signed word[16];
	
	ASSIGN
		-- CFA structure (loc)
		init(loc) := init_pv;
		next(loc) := case
			loc = init_pv & (TRUE) : loop_start;
			loc = loop_start & (TRUE) : prepare_BoC;
			loc = prepare_BoC & (TRUE) : l_main_call;
			loc = verificationLoop_VerificationLoop_l15 & (TRUE) : prepare_EoC;
			loc = prepare_EoC & (TRUE) : loop_start;
			loc = verificationLoop_VerificationLoop_l1 & ((instance_N) <= (0sd16_0)) : verificationLoop_VerificationLoop_l15;
			loc = verificationLoop_VerificationLoop_l1 & ((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))) : verificationLoop_VerificationLoop_l15;
			loc = verificationLoop_VerificationLoop_l1 & ((!((instance_N) <= (0sd16_0))) & (!((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))))) : verificationLoop_VerificationLoop_l12;
			loc = verificationLoop_VerificationLoop_l8 & (TRUE) : verificationLoop_VerificationLoop_l9;
			loc = verificationLoop_VerificationLoop_l9 & (TRUE) : verificationLoop_VerificationLoop_l12;
			loc = verificationLoop_VerificationLoop_l12 & ((instance_i) <= (instance_N)) : verificationLoop_VerificationLoop_l8;
			loc = verificationLoop_VerificationLoop_l12 & (!((instance_i) <= (instance_N))) : verificationLoop_VerificationLoop_l15;
			loc = l_main_call & (TRUE) : verificationLoop_VerificationLoop_l1;
			TRUE: loc;
		esac;
		
		init(instance_N) := 0sd16_0;
		next(instance_N) := case
			loc = loop_start & (TRUE) : __random_instance_N; -- Nondeterministic
			TRUE  : instance_N;
		esac;
		init(instance_O) := 0sd16_0;
		next(instance_O) := case
			loc = verificationLoop_VerificationLoop_l1 & ((instance_N) <= (0sd16_0)) : 0sd16_0;
			loc = verificationLoop_VerificationLoop_l1 & ((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))) : 0sd16_1;
			loc = verificationLoop_VerificationLoop_l12 & (!((instance_i) <= (instance_N))) : instance_F2;
			loc = l_main_call & (TRUE) : 0sd16_0;
			TRUE  : instance_O;
		esac;
		init(instance_F1) := 0sd16_1;
		next(instance_F1) := case
			loc = verificationLoop_VerificationLoop_l8 & (TRUE) : instance_F2;
			TRUE  : instance_F1;
		esac;
		init(instance_F2) := 0sd16_1;
		next(instance_F2) := case
			loc = verificationLoop_VerificationLoop_l9 & (TRUE) : instance_F_next;
			TRUE  : instance_F2;
		esac;
		init(instance_F_next) := 0sd16_0;
		next(instance_F_next) := case
			loc = verificationLoop_VerificationLoop_l12 & ((instance_i) <= (instance_N)) : (instance_F1) + (instance_F2);
			TRUE  : instance_F_next;
		esac;
		init(instance_i) := 0sd16_0;
		next(instance_i) := case
			loc = verificationLoop_VerificationLoop_l1 & ((!((instance_N) <= (0sd16_0))) & (!((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))))) : 0sd16_2;
			loc = verificationLoop_VerificationLoop_l9 & (TRUE) : (instance_i) + (0sd16_1);
			TRUE  : instance_i;
		esac;
		init(EoC) := FALSE;
		next(EoC) := case
			loc = verificationLoop_VerificationLoop_l15 & (TRUE) : TRUE;
			loc = prepare_EoC & (TRUE) : FALSE;
			TRUE  : EoC;
		esac;
		init(BoC) := FALSE;
		next(BoC) := case
			loc = loop_start & (TRUE) : TRUE;
			loc = prepare_BoC & (TRUE) : FALSE;
			TRUE  : BoC;
		esac;

-- Requirement
CTLSPEC AG((EoC) -> ((((instance_O) <= (0sd16_32767)) & ((instance_F1) <= (0sd16_32767))) & ((instance_F2) <= (0sd16_32767))));
