-- Model
MODULE main
	VAR
		loc : {init_pv, end, loop_start, prepare_BoC, l_main_call, prepare_EoC, verificationLoop_VerificationLoop_l12, verificationLoop_VerificationLoop_l15};
		instance_N : signed word[16];
		instance_i : signed word[16];
		__assertion_error : unsigned word[16]; -- frozen
		EoC : boolean; -- frozen
		BoC : boolean; -- frozen
		-- Random vars for nondeterministic INTs
		__random_instance_N : signed word[16];
	
	ASSIGN
		-- CFA structure (loc)
		init(loc) := init_pv;
		next(loc) := case
			loc = init_pv & (TRUE) : loop_start;
			loc = loop_start & (TRUE) : prepare_BoC;
			loc = prepare_BoC & (TRUE) : l_main_call;
			loc = verificationLoop_VerificationLoop_l15 & (TRUE) : prepare_EoC;
			loc = prepare_EoC & (TRUE) : loop_start;
			loc = l_main_call & ((instance_N) <= (0sd16_0)) : verificationLoop_VerificationLoop_l15;
			loc = l_main_call & ((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))) : verificationLoop_VerificationLoop_l15;
			loc = l_main_call & ((!((instance_N) <= (0sd16_0))) & (!((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))))) : verificationLoop_VerificationLoop_l12;
			loc = verificationLoop_VerificationLoop_l12 & ((instance_i) <= (instance_N)) : verificationLoop_VerificationLoop_l12;
			loc = verificationLoop_VerificationLoop_l12 & (!((instance_i) <= (instance_N))) : verificationLoop_VerificationLoop_l15;
			TRUE: loc;
		esac;
		
		init(instance_N) := 0sd16_0;
		next(instance_N) := case
			loc = loop_start & (TRUE) : __random_instance_N; -- Nondeterministic
			TRUE  : instance_N;
		esac;
		init(instance_i) := 0sd16_0;
		next(instance_i) := case
			loc = l_main_call & ((!((instance_N) <= (0sd16_0))) & (!((!((instance_N) <= (0sd16_0))) & ((instance_N) = (0sd16_1))))) : 0sd16_2;
			loc = verificationLoop_VerificationLoop_l12 & ((instance_i) <= (instance_N)) : (instance_i) + (0sd16_1);
			TRUE  : instance_i;
		esac;
		init(__assertion_error) := 0ud16_0;
		next(__assertion_error) := case
			TRUE  : __assertion_error;
		esac;
		init(EoC) := FALSE;
		next(EoC) := case
			loc = verificationLoop_VerificationLoop_l15 & (TRUE) : TRUE;
			loc = prepare_EoC & (TRUE) : FALSE;
			TRUE  : EoC;
		esac;
		init(BoC) := FALSE;
		next(BoC) := case
			loc = loop_start & (TRUE) : TRUE;
			loc = prepare_BoC & (TRUE) : FALSE;
			TRUE  : BoC;
		esac;

-- Requirement
CTLSPEC AG((EoC) -> ((__assertion_error) = (0ud16_0)));
