-- Model
MODULE main
	VAR
		loc : {init_pv, end, loop_start, prepare_BoC, l_main_call, callEnd, prepare_EoC, verificationLoop_VerificationLoop_l1, verificationLoop_VerificationLoop_l2, verificationLoop_VerificationLoop_l3};
		instance_i : signed word[16]; -- frozen
		instance_a : signed word[16]; -- frozen
		instance_b : signed word[16]; -- frozen
		instance_c : signed word[16]; -- frozen
		instance_d0 : signed word[16]; -- frozen
		EoC : boolean; -- frozen
		BoC : boolean; -- frozen
		-- Random vars for nondeterministic INTs
		__random_instance_i : signed word[16];
	
	ASSIGN
		-- CFA structure (loc)
		init(loc) := init_pv;
		next(loc) := case
			loc = init_pv & (TRUE) : loop_start;
			loc = loop_start & (TRUE) : prepare_BoC;
			loc = prepare_BoC & (TRUE) : l_main_call;
			loc = callEnd & (TRUE) : prepare_EoC;
			loc = prepare_EoC & (TRUE) : loop_start;
			loc = verificationLoop_VerificationLoop_l1 & (TRUE) : verificationLoop_VerificationLoop_l2;
			loc = verificationLoop_VerificationLoop_l2 & (TRUE) : verificationLoop_VerificationLoop_l3;
			loc = verificationLoop_VerificationLoop_l3 & (TRUE) : callEnd;
			loc = l_main_call & (TRUE) : verificationLoop_VerificationLoop_l1;
			TRUE: loc;
		esac;
		
		init(instance_i) := 0sd16_0;
		next(instance_i) := case
			loc = loop_start & (TRUE) : __random_instance_i; -- Nondeterministic
			TRUE  : instance_i;
		esac;
		init(instance_a) := 0sd16_0;
		next(instance_a) := case
			loc = l_main_call & (TRUE) : instance_i;
			TRUE  : instance_a;
		esac;
		init(instance_b) := 0sd16_0;
		next(instance_b) := case
			loc = verificationLoop_VerificationLoop_l1 & (TRUE) : instance_a;
			TRUE  : instance_b;
		esac;
		init(instance_c) := 0sd16_0;
		next(instance_c) := case
			loc = verificationLoop_VerificationLoop_l2 & (TRUE) : instance_b;
			TRUE  : instance_c;
		esac;
		init(instance_d0) := 0sd16_0;
		next(instance_d0) := case
			loc = verificationLoop_VerificationLoop_l3 & (TRUE) : instance_c;
			TRUE  : instance_d0;
		esac;
		init(EoC) := FALSE;
		next(EoC) := case
			loc = callEnd & (TRUE) : TRUE;
			loc = prepare_EoC & (TRUE) : FALSE;
			TRUE  : EoC;
		esac;
		init(BoC) := FALSE;
		next(BoC) := case
			loc = loop_start & (TRUE) : TRUE;
			loc = prepare_BoC & (TRUE) : FALSE;
			TRUE  : BoC;
		esac;

-- Requirement
CTLSPEC AG((EoC) -> (((((instance_a) = (instance_i)) & ((instance_b) = (instance_a))) & ((instance_c) = (instance_b))) & ((instance_d0) = (instance_c))));
