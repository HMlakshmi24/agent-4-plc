-- Model
MODULE main
	VAR
		loc : {init_pv, end, loop_start, prepare_BoC, l_main_call, prepare_EoC, verificationLoop_VerificationLoop_l3, verificationLoop_VerificationLoop_l5, verificationLoop_VerificationLoop_l11, verificationLoop_VerificationLoop_l14, verificationLoop_VerificationLoop_l16};
		instance_N : signed word[16];
		instance_O : signed word[16]; -- frozen
		instance_F1 : signed word[16]; -- frozen
		instance_F2 : signed word[16]; -- frozen
		instance_CNT : signed word[16];
		instance_Temp : signed word[16];
		EoC : boolean; -- frozen
		BoC : boolean; -- frozen
		-- Random vars for nondeterministic INTs
		__random_instance_N : signed word[16];
	
	ASSIGN
		-- CFA structure (loc)
		init(loc) := init_pv;
		next(loc) := case
			loc = init_pv & (TRUE) : loop_start;
			loc = loop_start & (TRUE) : prepare_BoC;
			loc = prepare_BoC & (TRUE) : l_main_call;
			loc = verificationLoop_VerificationLoop_l16 & (TRUE) : prepare_EoC;
			loc = prepare_EoC & (TRUE) : loop_start;
			loc = l_main_call & ((instance_N) <= (0sd16_2)) : verificationLoop_VerificationLoop_l16;
			loc = l_main_call & (!((instance_N) <= (0sd16_2))) : verificationLoop_VerificationLoop_l3;
			loc = verificationLoop_VerificationLoop_l5 & (((instance_F1) + (instance_F2)) > (0sd16_32767)) : verificationLoop_VerificationLoop_l14;
			loc = verificationLoop_VerificationLoop_l5 & (!(((instance_F1) + (instance_F2)) > (0sd16_32767))) : verificationLoop_VerificationLoop_l11;
			loc = verificationLoop_VerificationLoop_l11 & (TRUE) : verificationLoop_VerificationLoop_l3;
			loc = verificationLoop_VerificationLoop_l3 & ((instance_CNT) < (instance_N)) : verificationLoop_VerificationLoop_l5;
			loc = verificationLoop_VerificationLoop_l3 & (!((instance_CNT) < (instance_N))) : verificationLoop_VerificationLoop_l14;
			loc = verificationLoop_VerificationLoop_l14 & (TRUE) : verificationLoop_VerificationLoop_l16;
			TRUE: loc;
		esac;
		
		init(instance_N) := 0sd16_5;
		next(instance_N) := case
			loc = loop_start & (TRUE) : __random_instance_N; -- Nondeterministic
			TRUE  : instance_N;
		esac;
		init(instance_O) := 0sd16_0;
		next(instance_O) := case
			loc = l_main_call & ((instance_N) <= (0sd16_2)) : 0sd16_1;
			loc = verificationLoop_VerificationLoop_l5 & (((instance_F1) + (instance_F2)) > (0sd16_32767)) : 0sd16_32767;
			loc = verificationLoop_VerificationLoop_l14 & (TRUE) : instance_F2;
			TRUE  : instance_O;
		esac;
		init(instance_F1) := 0sd16_1;
		next(instance_F1) := case
			loc = verificationLoop_VerificationLoop_l5 & (!(((instance_F1) + (instance_F2)) > (0sd16_32767))) : instance_F2;
			TRUE  : instance_F1;
		esac;
		init(instance_F2) := 0sd16_1;
		next(instance_F2) := case
			loc = verificationLoop_VerificationLoop_l11 & (TRUE) : instance_Temp;
			TRUE  : instance_F2;
		esac;
		init(instance_CNT) := 0sd16_2;
		next(instance_CNT) := case
			loc = verificationLoop_VerificationLoop_l11 & (TRUE) : (instance_CNT) + (0sd16_1);
			TRUE  : instance_CNT;
		esac;
		init(instance_Temp) := 0sd16_0;
		next(instance_Temp) := case
			loc = verificationLoop_VerificationLoop_l3 & ((instance_CNT) < (instance_N)) : (instance_F1) + (instance_F2);
			TRUE  : instance_Temp;
		esac;
		init(EoC) := FALSE;
		next(EoC) := case
			loc = verificationLoop_VerificationLoop_l16 & (TRUE) : TRUE;
			loc = prepare_EoC & (TRUE) : FALSE;
			TRUE  : EoC;
		esac;
		init(BoC) := FALSE;
		next(BoC) := case
			loc = loop_start & (TRUE) : TRUE;
			loc = prepare_BoC & (TRUE) : FALSE;
			TRUE  : BoC;
		esac;

-- Requirement
CTLSPEC AG((EoC) -> ((((instance_O) <= (0sd16_32767)) & ((instance_F1) <= (0sd16_32767))) & ((instance_F2) <= (0sd16_32767))));
